# GENERAL
snippet class
class $1 {
	constructor() {
		$0
	}
}
endsnippet

snippet while
while($1) {
	$0
}
endsnippet

snippet map
$1.map(($2) => {
	$0
})
endsnippet

snippet red
$1.reduce((map, val) => {
	$0
	return map
}, {})
endsnippet

snippet last
$1[$1.length - 1]
endsnippet

snippet forEach
$1.forEach(($2) => {
	$0
})
endsnippet

snippet iter
$1.$2(($3) => {
	$0
})
endsnippet

snippet do
do {
	$0
} while($1)
endsnippet

snippet cfun
const $1 = ($2) => {
	$0
};
endsnippet

snippet pro
new Promise((resolve, reject) => {
	return $1($2, (e) => {
		if (e) {
			return reject(e)
		}

		$0

		resolve()
	})
})
endsnippet

snippet require
, $1 = require('$1')
endsnippet

snippet imp
import { $1 } from '$2'
endsnippet

snippet print
console.log(\`$1\`)
endsnippet

snippet nprint
console.log('\n\n', $1, '\n\n');
endsnippet

snippet alog
console.log.apply(console, $1.map($2 => $3));
endsnippet

snippet log
console.log('[sam]', $0)
endsnippet

snippet func
function ${1:name}(${2:args}) {
	${3:body}
}
endsnippet

snippet as
async function ${1:name}(${2:args}) {
	${3:body}
}
endsnippet

snippet if
if ($1) {
	$0
}
endsnippet

snippet else
else {
	$0
}
endsnippet

snippet elseif
else if ($1) {
	$0
}
endsnippet

snippet for
for (let $1 = 0; $1 < $2; $1++) {
	$0
}
endsnippet

snippet refor
for (let $1 = $2; $1 >= 0; $1--) {
	$0
}
endsnippet

snippet forin
for (let $1 in $2) {
	$3
}
endsnippet

snippet iife
(function() {
	$1
})();
endsnippet

snippet try
try {
	$0
} catch (e) {
	console.log('ERROR', e)
}
endsnippet

snippet fn
$1($2) {
	$0
}
endsnippet

snippet pfn
$1.prototype.$2 = function($3) {
	$0
};
endsnippet

snippet extend
$1.prototype = Object.create($2.prototype);
$1.prototype.constructor = $1;
endsnippet

snippet then
.then(($1) => {
	$0
})
endsnippet

snippet catch
.catch(($1) => {
	$0
})
endsnippet

snippet switch
switch($1) {
	$0
	default:
		return
}
endsnippet

snippet case
case $1:
	$0
	break
endsnippet

snippet forEach
$1.forEach(($2) => {
	$0
});
endsnippet

snippet assign
Object.assign({}, $1, $2)
endsnippet

snippet timeout
setTimeout(() => {
	$0
}, $1)
endsnippet

snippet arrow
($1) => {
	$0
}
endsnippet

snippet interval
setInterval(() => {
	$0
}, $1)
endsnippet

snippet raf
window.requestAnimationFrame($1)
endsnippet

snippet lorem
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum eleifend
velit id turpis fringilla volutpat. Nulla tristique sem ex, ac dignissim odio
volutpat sit amet.
endsnippet

snippet param
@param {$1} $2 - $3
endsnippet

snippet fcom
/**
 * $0
 */
endsnippet

# JSDOC
snippet typedef
/**
 * $3
 *
 * @typedef {$1} $2
 * @property {}
 */
endsnippet

# Angular
snippet module
angular.module('$1', [$2]);
endsnippet

snippet run
angular.module('$1')
	.run([
		$2Run
	]);

function $2Run() {
	$0
}
endsnippet

snippet controller
angular.module('$1')
.controller('$2', ($3) => {
	$0
});
endsnippet

snippet filter
angular.module('$1')
	.filter('$2', [
		'$3',
		$2Filter
	]);

function $2Filter($3) {
	return function($3) {
		$4
	}
}
endsnippet

snippet directive
angular.module('$1')
.directive('$2', () => {
	return {
		restrict: 'E',
		link: ($scope) => {

		}
	}
});
endsnippet

snippet factory
angular.module('$1')
.factory('$2', function($3) {

});
endsnippet

# React
snippet component
class $1 extends React.Component {
	static propTypes = {

	}

	static defaultProps = {

	}

	render() {
		const {
			...restProps,
		} = this.props

		return <div
			{...restProps}
		>
		</div>
	}
}
endsnippet

snippet higherOrderComponent
(ComposedComponent) => class extends Component {
	render() {
		return <ComposedComponent />
	}
}
endsnippet

snippet iifejsx
{(() => {
	$0
})()}
endsnippet

snippet cl
className='$1'
endsnippet

snippet st
styleName='$1'
endsnippet

snippet link
import { Link } from 'react-router';
endsnippet

snippet connect
import { connect } from 'react-redux'

const mapStateToProps = (state, ownProps) => ({
	...state,
})

const mapDispatchToProps = {

}

@connect(mapStateToProps, mapDispatchToProps)
endsnippet

snippet Motion
<Motion style={$1}>
	{interpolatingStyle => {
		return (
			$0
		);
	}}
</Motion>
endsnippet

# Redux
snippet reducer
function reducer(state$1, action) {
	switch(action.type) {
		$0
		default:
			break
	}

	return state
}
endsnippet

# Misc
snippet gulptask
gulp.task('$1', function(done) {
	$0
});
endsnippet

# Mocha
snippet it
it('$1', async () => {
	$0
})
endsnippet

snippet describe
describe('$1', () => {
	$0
})
endsnippet

snippet ex
expect($1).$2
endsnippet

snippet disablelint
/*eslint-disable*/
$0
/*eslint-enable*/
endsnippet

snippet inv
invariant($1, '$2')
endsnippet

snippet co
const {
	$1
} = $2
endsnippet

snippet bindthis
this.$1 = this.$1.bind(this)
endsnippet

snippet exp
export default $0
endsnippet

snippet hr
/*****************************************************************************
 * $0
 *****************************************************************************/
endsnippet

snippet ko
async function $1(context, next) {
	$0
}
endsnippet

snippet todo
TODO(sam): $0
endsnippet

snippet mdcode
\\\`\\\`\\\`
$0
\\\`\\\`\\\`
endsnippet

snippet inst
$1 = ($2) => {
	$0
}
endsnippet

snippet clf
$1($2) {
	$0
}
endsnippet

snippet printvar
console.log('[sam]', '$1', $1)
endsnippet

snippet invar
invariant($1, \`'$1' must be provided$0\`)
endsnippet

snippet decorator
function $1(target, key, descriptor) {
	const fn = descriptor.value
	const newFn = async(...args) => {
		const res = await fn.call(target, ...args)
		return res
	}

	descriptor.value = newFn
	return descriptor
}
endsnippet
